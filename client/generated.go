// Code generated by github.com/Khan/genqlient, DO NOT EDIT.

package client

import (
	"context"
	"encoding/json"

	"github.com/Khan/genqlient/graphql"
)

// GetTodosResponse is returned by GetTodos on success.
type GetTodosResponse struct {
	Todos []GetTodosTodosTodo `json:"todos"`
}

// GetTodos returns GetTodosResponse.Todos, and is useful for accessing the field via an interface.
func (v *GetTodosResponse) GetTodos() []GetTodosTodosTodo { return v.Todos }

// GetTodosTodosTodo includes the requested fields of the GraphQL type Todo.
type GetTodosTodosTodo struct {
	allTodo `json:"-"`
}

// GetId returns GetTodosTodosTodo.Id, and is useful for accessing the field via an interface.
func (v *GetTodosTodosTodo) GetId() string { return v.allTodo.Id }

// GetText returns GetTodosTodosTodo.Text, and is useful for accessing the field via an interface.
func (v *GetTodosTodosTodo) GetText() string { return v.allTodo.Text }

// GetDone returns GetTodosTodosTodo.Done, and is useful for accessing the field via an interface.
func (v *GetTodosTodosTodo) GetDone() bool { return v.allTodo.Done }

// GetUser returns GetTodosTodosTodo.User, and is useful for accessing the field via an interface.
func (v *GetTodosTodosTodo) GetUser() allTodoUser { return v.allTodo.User }

func (v *GetTodosTodosTodo) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*GetTodosTodosTodo
		graphql.NoUnmarshalJSON
	}
	firstPass.GetTodosTodosTodo = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.allTodo)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalGetTodosTodosTodo struct {
	Id string `json:"id"`

	Text string `json:"text"`

	Done bool `json:"done"`

	User allTodoUser `json:"user"`
}

func (v *GetTodosTodosTodo) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *GetTodosTodosTodo) __premarshalJSON() (*__premarshalGetTodosTodosTodo, error) {
	var retval __premarshalGetTodosTodosTodo

	retval.Id = v.allTodo.Id
	retval.Text = v.allTodo.Text
	retval.Done = v.allTodo.Done
	retval.User = v.allTodo.User
	return &retval, nil
}

// allTodo includes the GraphQL fields of Todo requested by the fragment allTodo.
type allTodo struct {
	Id   string      `json:"id"`
	Text string      `json:"text"`
	Done bool        `json:"done"`
	User allTodoUser `json:"user"`
}

// GetId returns allTodo.Id, and is useful for accessing the field via an interface.
func (v *allTodo) GetId() string { return v.Id }

// GetText returns allTodo.Text, and is useful for accessing the field via an interface.
func (v *allTodo) GetText() string { return v.Text }

// GetDone returns allTodo.Done, and is useful for accessing the field via an interface.
func (v *allTodo) GetDone() bool { return v.Done }

// GetUser returns allTodo.User, and is useful for accessing the field via an interface.
func (v *allTodo) GetUser() allTodoUser { return v.User }

// allTodoUser includes the requested fields of the GraphQL type User.
type allTodoUser struct {
	allUser `json:"-"`
}

// GetId returns allTodoUser.Id, and is useful for accessing the field via an interface.
func (v *allTodoUser) GetId() string { return v.allUser.Id }

// GetName returns allTodoUser.Name, and is useful for accessing the field via an interface.
func (v *allTodoUser) GetName() string { return v.allUser.Name }

// GetAge returns allTodoUser.Age, and is useful for accessing the field via an interface.
func (v *allTodoUser) GetAge() int { return v.allUser.Age }

func (v *allTodoUser) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*allTodoUser
		graphql.NoUnmarshalJSON
	}
	firstPass.allTodoUser = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.allUser)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalallTodoUser struct {
	Id string `json:"id"`

	Name string `json:"name"`

	Age int `json:"age"`
}

func (v *allTodoUser) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *allTodoUser) __premarshalJSON() (*__premarshalallTodoUser, error) {
	var retval __premarshalallTodoUser

	retval.Id = v.allUser.Id
	retval.Name = v.allUser.Name
	retval.Age = v.allUser.Age
	return &retval, nil
}

// allUser includes the GraphQL fields of User requested by the fragment allUser.
type allUser struct {
	Id   string `json:"id"`
	Name string `json:"name"`
	Age  int    `json:"age"`
}

// GetId returns allUser.Id, and is useful for accessing the field via an interface.
func (v *allUser) GetId() string { return v.Id }

// GetName returns allUser.Name, and is useful for accessing the field via an interface.
func (v *allUser) GetName() string { return v.Name }

// GetAge returns allUser.Age, and is useful for accessing the field via an interface.
func (v *allUser) GetAge() int { return v.Age }

func GetTodos(
	ctx context.Context,
	client graphql.Client,
) (*GetTodosResponse, error) {
	var err error

	var retval GetTodosResponse
	err = client.MakeRequest(
		ctx,
		"GetTodos",
		`
query GetTodos {
	todos {
		... allTodo
	}
}
fragment allTodo on Todo {
	id
	text
	done
	user {
		... allUser
	}
}
fragment allUser on User {
	id
	name
	age
}
`,
		&retval,
		nil,
	)
	return &retval, err
}
